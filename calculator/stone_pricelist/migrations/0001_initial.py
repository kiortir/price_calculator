# Generated by Django 3.2.9 on 2022-07-04 13:52

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=70, verbose_name='название коллекции')),
                ('default_price', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='цена по умолчанию')),
            ],
            options={
                'verbose_name': 'коллекция',
                'verbose_name_plural': 'коллекции',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='название цвета')),
                ('code', models.CharField(blank=True, max_length=7, null=True, verbose_name='hex-значение')),
            ],
            options={
                'verbose_name': 'цвет',
                'verbose_name_plural': 'цвета',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='название')),
                ('code', models.CharField(blank=True, max_length=3, null=True, verbose_name='код валюты ЦБ')),
                ('value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('value_date', models.DateField(blank=True, null=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('auto_update', models.BooleanField(default=True, verbose_name='обновлять автоматически')),
            ],
            options={
                'verbose_name': 'валюта',
                'verbose_name_plural': 'валюты',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CurrencyModifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='название схемы')),
                ('floor', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='минимальное значение')),
                ('ceiling', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='максимальное значение значение')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='stone_pricelist.currency', verbose_name='валюта основы')),
            ],
        ),
        migrations.CreateModel(
            name='InternetImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(verbose_name='ссылка на изображение')),
                ('thumbnail', models.TextField(blank=True, null=True, verbose_name='ссылка на превью')),
            ],
        ),
        migrations.CreateModel(
            name='InternetImageGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='название')),
                ('raw_cut_price', models.DecimalField(decimal_places=2, default=Decimal('1500'), max_digits=15, verbose_name='цена распила')),
                ('currency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturers', to='stone_pricelist.currencymodifier')),
                ('cut_currency', models.ForeignKey(default='Рубль', on_delete=django.db.models.deletion.SET_DEFAULT, to='stone_pricelist.currencymodifier', to_field='name', verbose_name='валюта распила')),
            ],
            options={
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MarginDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_value', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='скидка/наценка, %')),
                ('from_date', models.DateTimeField(blank=True, null=True)),
                ('to_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MaterialAddon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='свойство')),
            ],
            options={
                'verbose_name': 'дополнительное поле',
                'verbose_name_plural': 'дополнительные поля',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='активен')),
                ('active_from', models.DateTimeField(default=django.utils.timezone.now, verbose_name='активен с')),
                ('active_to', models.DateTimeField(blank=True, default=None, null=True, verbose_name='активен до')),
                ('discount', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stone_pricelist.margindiscount', verbose_name='общая скидка, %')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricelists', to='stone_pricelist.manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='SlabSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('width', models.PositiveSmallIntegerField(verbose_name='ширина')),
                ('height', models.PositiveSmallIntegerField(verbose_name='высота')),
            ],
            options={
                'verbose_name': 'размер листа',
                'verbose_name_plural': 'размеры листов',
            },
        ),
        migrations.CreateModel(
            name='Stone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100, verbose_name='название текстуры')),
                ('bitrix_id', models.TextField(verbose_name='id битрикс')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='stones', to='stone_pricelist.collection', verbose_name='коллекция')),
                ('color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stones', to='stone_pricelist.color')),
                ('gallery', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stone_pricelist.internetimagegallery', verbose_name='галерея')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='stones', to='stone_pricelist.manufacturer', verbose_name='производитель')),
                ('preview', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='stone_pricelist.internetimage', verbose_name='фото камня')),
                ('similar', models.ManyToManyField(blank=True, related_name='_stone_pricelist_stone_similar_+', to='stone_pricelist.Stone')),
            ],
            options={
                'verbose_name': 'камень',
                'verbose_name_plural': 'камни',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Surface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='название поверхности')),
                ('family', models.CharField(choices=[('POLI', 'Полированная'), ('MATT', 'Матовая'), ('TEXT', 'Фактурная')], default='Полированная', max_length=4, verbose_name='категория поверхности')),
            ],
            options={
                'verbose_name': 'поверхность',
                'verbose_name_plural': 'поверхности',
            },
        ),
        migrations.CreateModel(
            name='TextureType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='название рисунка')),
            ],
            options={
                'verbose_name': 'тип рисунка',
                'verbose_name_plural': 'типы рисунков',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Thickness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('value', models.PositiveSmallIntegerField(unique=True, verbose_name='толщина, мм')),
            ],
            options={
                'verbose_name': 'толщина камня',
                'verbose_name_plural': 'толщины камней',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoneConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=50, null=True)),
                ('discount', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stone_pricelist.margindiscount', verbose_name='скидка, %')),
                ('pricelist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='stone_pricelist.pricelist')),
                ('slab_size', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pricelist_entries', to='stone_pricelist.slabsize')),
                ('stone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='configurations', to='stone_pricelist.stone')),
                ('surface', models.ForeignKey(default='Полированная', on_delete=django.db.models.deletion.PROTECT, related_name='pricelist_entries', to='stone_pricelist.surface', to_field='name')),
                ('thickness', models.ForeignKey(default=20, on_delete=django.db.models.deletion.PROTECT, related_name='pricelist_entries', to='stone_pricelist.thickness', to_field='value')),
            ],
        ),
        migrations.AddField(
            model_name='stone',
            name='texture_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stones', to='stone_pricelist.texturetype', verbose_name='типа текстуры'),
        ),
        migrations.CreateModel(
            name='MaterialAddonValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BooleanField(default=False)),
                ('addon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stone_pricelist.materialaddon')),
                ('stone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addons', to='stone_pricelist.stoneconfiguration')),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=500, verbose_name='индекс сортировки')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='название')),
                ('margin_percent', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='наценка на материал, %')),
                ('addons', models.ManyToManyField(related_query_name='addons', to='stone_pricelist.MaterialAddon', verbose_name='дополнительные поля')),
            ],
            options={
                'verbose_name': 'материал',
                'verbose_name_plural': 'материалы',
                'ordering': ['priority'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='manufacturer',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='stone_pricelist.material'),
        ),
        migrations.AddField(
            model_name='internetimage',
            name='gallery',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='stone_pricelist.internetimagegallery'),
        ),
        migrations.AddField(
            model_name='currencymodifier',
            name='margin',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stone_pricelist.margindiscount', verbose_name='наценка, %'),
        ),
        migrations.AddField(
            model_name='collection',
            name='default_texture',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collections', to='stone_pricelist.texturetype'),
        ),
        migrations.AddField(
            model_name='collection',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='collections', to='stone_pricelist.manufacturer', verbose_name='производитель'),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together={('manufacturer', 'name')},
        ),
    ]
